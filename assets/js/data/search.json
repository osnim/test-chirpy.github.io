[ { "title": "스프링 입문 - 2.프로젝트 생성", "url": "/posts/Inflearn-spring2/", "categories": "Inflearn", "tags": "Inflearn, Spring", "date": "2022-02-22 13:50:00 +0900", "snippet": "스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술프로젝트 생성사전 준비- java 11 설치- IDE: IntelliJ 또는 Eclipse 설치스프링 부트 스타터 사이트로 이동해서 스프링 프로젝트 생성합니다예전에는 스프링 프로젝트를 처음부터 다 만들었다면 요즘은 대부분 스프링 부트로 스프링 프로젝트를 만듭니다.- URL : &amp;lt;https://start.spring.io&amp;gt;실제 프로젝트 생성 Project필요한 라이브러리를 가져오고 빌드하는 라이프 사이클까지 모두 관리해주는 툴 과거는 Maven으로 만들었지만 요즘은 Gradle로 넘어오는 추세입니다. Language Java Spring Boot버전을 선택해야하는데 SNAPSHOT, M1은 정식 릴리즈된 버전이 아니므로 선택하지말고 정식 버전인 2.6.X을 선택해야 합니다. Group보통 기업의 도메인이나 이름을 넣지만 입문자는 크게 상관이 없으므로 Hello 를 넣습니다. Artfact빌드된 후 나오는 결과물로 프로젝트명이라고 보시면 됩니다. Name설정 값을 그대로 유지합니다. Description설정 값을 그대로 유지합니다. Pakage name설정 값을 그대로 유지합니다. Dependencies스프링 부트를 시작할 때 어떤 라이브러리를 가져와 쓸 것인지 결정합니다.저희는 웹 프로젝트를 생성할 것이기 때문에 spring web을 입력하고 선택합니다.추가로 웹 브라우저에서는 HTML이 보이듯이 스프링 부트에서 HTML을 만들어주는 Thymeleaf 템플릿 엔진이 필요합니다.모든 설정을 마치고 GENERATE 버튼을 클릭하여 다운로드를 받습니다.다운로드 받은 압축 파일의 압축을 풀고 IntelliJ 같은 IDE로 build.gradle 파일을 엽니다. 이후 90M 정도의 외부라이브러리를 다운 받기 때문에 완료가 될 때 까지 기다려줍니다.스프링 부트 파일 분석 .ideaIntelliJ 가 사용하는 설정 파일입니다. gradle gradle이 사용하는 파일입니다. src main: 실제 소스파일이 있습니다.resoruces : java 파일을 제외한 파일test: 테스트와 관련된 코드들이 들어감 build.gradleplugins: 지금은 스프링 부트가 가져온 라이브러리라고 간단하게만 이해하고 가면 됩니다.sourceCompatibility: Java 버전을 의미합니다. repositoriesmavenCentral: dependencies에 있는 라이브러리를 다운받는 공개된 사이트입니다.필요하면 특정 사이트를 추가하여 다운을 받을 수도 있습니다. dependencies위에서 가져온 thymeleaf, web등의 라이브러리에 대한 정보들을 갖고 있습니다.testImplementation: 요즘은 보통 테스트 라이브러리가 자동으로 들어갑니다. gitignoregit에는 소스코드만 올라가야 하므로 빌드된 결과물은 올라가면 안됩니다. 이 과정을 스프링 부트 스타터에서 자동으로 해줍니다.스프링 실행하기main 폴더의 HelloSpringApplication 이라는 클래스가 자동으로 만들어져 있습니다.여기에는 @SpringBootApplication 이라는 어노테이션(Annotation)이 만들어진 것을 확인할 수 있습니다.자바는 기본적으로 main 메소드에서 시작합니다.따라서 main 메소드 왼쪽의 초록색 &amp;gt; 표시를 누르고 실행을 누르면 됩니다. 저는 여기서 에러가 발생했는데 아래 해결하는 링크를 걸어두었으니 저와 같은 문제가 발생하신 분들은 URL로 이동하여 해결하시기 바랍니다.정상적으로 작동을 하면 다음과 같은 화면을 볼 수 있습니다.먼저 spring 이라는 문구가 나오며 그 아래 버전이 나오는 것을 확인할 수 있습니다.그리고 맨 아래에서 2번째 줄의 중간을 보면Tomcat started on port(s): 8080(http)라는 것을 볼 수 있는데 http 프로토콜을 사용하여 8080 포트를 열어놓은 것을 확인할 수 있습니다.브라우저로 Localhost:8080 을 입력하면 다음과 같은 에러페이지 화면을 볼 수 있습니다.이렇게 뜨면 스프링 부트 애플리케이션이 run 하면서 제대로 작동하는 것입니다.스프링 부트 애플리케이션이 스스로 tomcat 이라는 웹서버를 내장하고 있기 떄문에 tomcat이라는 웹서버를 띄우면서 스프링부트를 자체적으로 같이 띄우게 되는 구조입니다.스프링 부트 애플리케이션이 제대로에러Java HotSpot(TM) 64-Bit Server VM warning: Options -Xverify:none and -noverify were deprecated in JDK 13 and will likely be removed in a future release.만약 여기서 위와 같은 에러가 뜬다면 다음을 확인해보시기 바랍니다.https://www.inflearn.com/questions/116973https://yellowh.tistory.com/105https://int-i.github.io/java/2020-11-21/openjdk-noverify-deprecated/저는 11버전을 사용해야하는데 15버전을 사용해서 13버전에서 에러가 발생했었습니다. 또한 IntelliJ에서 Gradle과 Project Stucture를 잘못 설정해주어 문제가 발생하였습니다이 글은 김영한님의 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 직접 정리한 내용입니다.출처: https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9E%85%EB%AC%B8-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8#curriculum" }, { "title": "스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술", "url": "/posts/Inflearn-spring1/", "categories": "Inflearn", "tags": "Inflearn, Spring", "date": "2022-02-22 13:50:00 +0900", "snippet": "강의소개왜 Spring을 배워야 하는가?실무에서 제대로 작동하는 웹 어플리케이션을 제작하기 위해 스프링을 학습해야 함실제 동작하는 간단한 웹 어플리케이션 개발 과정 스프링 프로젝트 생성 스프링 부트로 웹 서버 실행 회원 도메인 개발 웹 MVC 개발 DB 연동 -JDBC, JPA, 스프링 데이터 JPA 테스트 케이스 작성프로젝트 사용기술 JPA (Java Persistence API)강의 목표스프링 학습의 제대로 된 첫 길잡이 역할 스프링 기술 그 자체에 매몰되지 않고 어떻게 사용해야 하는지에 초점 오래된 스프링 기술과 마이너한 기술은 배제 실무에서 필요한 최신 개발 트렌드 반영하여 스프링 학습학습 방법처음 부터 끝까지 코딩스프링 완전 정복 로드맵 스프링 입문 (V) 스프링 핵심 원리 스프링 웹 MVC 스프링 DB 데이터 접근 기술 실전! 스프링 부트이 글은 김영한님의 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 직접 정리한 내용입니다.출처: https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9E%85%EB%AC%B8-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8#curriculum" }, { "title": "백준 11055 가장 큰 증가 부분 수열", "url": "/posts/BOJ-11055/", "categories": "BOJ, DP", "tags": "BOJ, DP, 11055", "date": "2022-02-13 23:05:00 +0900", "snippet": "문제출처: https://www.acmicpc.net/problem/11055오답 정리이 문제의 점화식과 규칙은 11053 문제의 유형과 너무 비슷했기 때문에 빠르게 찾을 수 있었다. 하지만 사소한 실수로 인해 시간을 너무 많이 뺏기고 문제를 풀지 못하는 불상사가 발생했습니다.어디가 문제였는지 틀린 코드와 맞은 코드를 한눈에 비교하면서 분석해보도록 하겠습니다.ㅠㅠ 위 그림에서 차이점을 찾을 수 있나요? 저는 처음에 큰 문제가 없을 줄 알고 왼쪽처럼 코딩을 했습니다. 하지만 이렇게 코딩을 한 경우 예제는 커버가 되지만 모든 tast case를 만족 시킬수 없었습니다.그럼 어디서 문제가 발생하였을까요?다름 아니라 dp의 초기값에서 문제가 발생했습니다.저는 DP문제를 풀 때 무의식적으로 dp = [0]x(n+1) 로 초기화를 합니다. DP에는 메모나 DP테이블로 사용하기 위해 당연히 내가 값을 저장하려고 선언하는 것이기 때문에 값은 0 아니면 NULL 같이 없어야 한다고 생각했습니다.이 문제는 이러한 저의 부주의한 코딩하는 습관 때문에 거의 다 맞추고도 계속 틀리는 문제가 발생했습니다.저는 고작 이런거 때문에 틀렸다는 것에 너무 억울해서 스스로 예시를 대입하며 문제를 찾아냈습니다.만약 수열이 A = {100, 1, 2, 3} 이었다면 값은 어떻게 나와야 할까요?바로 1, 2, 3이 증가하는 수열이고 정답은 6이 나와야합니다. 저는 제 코드에서 어떻게 잘못된 값이 나오는지 알아보기 위해 변수 i의 for문이 끝날때마다 값을 출력해봤습니다.위 그림에서 처럼 값이 1이 덜 찍히면서 오답 5가 출력되었습니다.저는 왜 제 코드에서 이런 문제가 발생하는지 알아보기 위해 직접 문제를 따져가며 풀어보았더니 그제서야 알 수 있었습니다.if a[j] &amp;lt; a[i]: dp[i] = max(dp[i], dp[j] + a[i])위 점화식에서 i=2일때,dp[i] = a[i]이므로 a[i] 값을 dp[i]에서 처음부터 활용한다는 것을 확인할 수 있었습니다.보기에서 보여준 예시는 처음부터 i= 2 일때 101이 나와 a[i]의 값을 무시해도 문제가 발견되지 않았습니다.이러한 실수로 인해 (사실은 실력입니다..ㅜㅜ) 이번 문제에서 시간을 많이 뺏긴 것 같습니다…다음부터는 점화식이나 규칙을 찾을 때 초기값이나 기저를 잘 확인하고 DP에서 무조건 0으로 초기화 하지 않고 꼼꼼히 생각해서 코드를 짜보기로 다짐했습니다." }, { "title": "졸업작품 프로젝트", "url": "/posts/A.I.R-app/", "categories": "Capstone Design, A.I.R", "tags": "Kwangwoon Univ., Advantech", "date": "2022-02-12 17:30:00 +0900", "snippet": "소개팀명: 망서리지마팀원: 양설희, 김민소, 심현재, 정하영주제: 스마트 캠퍼스를 위한 공기질 관리 시스템 구축 (20.07 ~ 21.06)이름: A.I.R (Air InfoRmaiton)기능: 광운대학교 캠퍼스 주요 시설 내부의 온/습도 및 유해물질의 상태를 파악하여 실시간으로 정보를 제공 1. 개발 배경최근 코로나19로 인해 실내에 있는 시간이 증가함에 따라 실내 환경에 대한 시도 군 차원의 관심과 각 기업의 관심이 증가하고 있습니다. 또한, 국민의 삶의 질 개선 욕구가 증가함에 따라 부적절한 실내 환경에 대한 우려가 증가 하는 추세입니다.현존하고 있는 공기질 관련 앱들은 대부분 미세먼지에 대한 수치만 나타내고 있고, 한눈에 알아보기는 쉽지 않습니다. 또한 기상청의 정보를 그대로 가져오는 것들이 많아 특정 지역에 적용하기는 쉽지 않습니다.2. 개발 내용1) 공기질 센서에서 취득한 데이터를 가공해 실시간으로 DB에 전송하는 시스템 설계 - 센서에 대한 펌웨어 설계 및 제작 - DB와 LoRa Gateway 연결 - DB의 데이터를 받아와 시각화 작업 진행2) DB에서 데이터를 분석하고 데이터를 사용자가 인지하고, 공기질 관리 시스템에 쉽게 접근하고 편리하게 사용하도록 하는 앱 개발 - DB 데이터를 가공해 앱으로 전송 - 사용자 접근이 쉬운 앱 구조 설계3. 개념 설계 (구조 설계)IoT 기능을 가지는 아두이노 기반 센서를 바탕으로 센서에 맞게 펌웨어를 설계한 뒤, 센서로부터 데이터를 받아와 WISE-3610 를 이용해 데이터베이스에 저장된 현재의 공기질 데이터를 보내줍니다.데이터베이스에 수집된 데이터를 기반으로 사용자가 인지하기 쉽게 정보를 시각화 한 후 Restful 기반의 서버 DB에 저장된 정보를 Restful API를 애플리케이션에서 확인할 수 있도록 하였습니다.데이터 전송의 기반은 LoRa 통신으로, 비교적 원거리를 지원하여 프로젝트에서 요구하는 지정된 구역 내 온/습도 및 유해물질의 상태를 파악할 수 있게 해줍니다.4. 역할 성 명　　 역 할 양 설 희 WISE 1510 센서 보드의 펌웨어 업로드를 위한 프로그램의 세팅과 펌웨어 bin 파일 제작. 김 민 소 웹 서버의 데이터를 RESTFul API를 활용하여 애플리케이션으로 연동. Volley와 Gson를 사용하여 애플리케이션과 웹 간의 Http Connection을 함. 안드로이드 애플리케이션 UI/UX 기획 및 제작. 심 현 재 센서별 코드 제작 및 github에 업로드 후 코드별 작동, 구동을 위한 수정과 센서별로 보드 연결 후 테스트 진행 정 하 영 아두이노 센서의 아날로그 데이터의 가공식 및 활용법 조사 및 펌웨어에서의 적용을 하고 센서를 보드에 연결. 5. 실행화면현재는 앱을 실행 하여도 위 사진처럼 실행되지 않습니다. 먼저 게이트웨이를 활성화시키고 코드의 웹 서버와 일치하게 ID와 비밀번호를 Http 헤더에 넣어줘야 합니다.6. 게이트웨이 WISE-3610 무선 IoT LoRa 프라이빗 네트워크 게이트웨이 퀄컴 Atheros 쿼드-코어 ARM Cortex-A7 SoC 빌트인 듀얼 밴드 동시 와이-파이 MU-MINO (2x2) WAN x1/ LAN X1 Gigabit 이더넷 모드버스 TCP 및 모드버스 RTU 네트워크 통합 Ipsec/L2TP VPN Traffic Encryption 소프트웨어 탑재로 다양한 네트워크 활용 가능 하드웨어 모듈화 설계 오픈WRT BSP 임베디드 웹 UI 유저 인터페이스 더보기: https://www.advantech.co.kr/products/08a68eee-c464-4d08-8e1a-f251e70ab40f/wise-3610/mod_3d1f1d3e-ef7b-4394-b66d-312da675e28c7. WISE-3610 Software Functionality WEB GUI를 이용해서 WISE-3610 게이트웨이의 설정들을 변경할 수 있습니다.8. WISE-1510 M2.COM LoRa IoT Node (LoRa: Long Range) wireless module Built-in LoRa / LoRaWAN connectivity Great for Low Power Wide Range application 더보기: https://www.advantech.co.kr/products/08a68eee-c464-4d08-8e1a-f251e70ab40f/wise-3610/mod_3d1f1d3e-ef7b-4394-b66d-312da675e28c유해물질을 감시하는 센서를 WISE-1510이 결합된 보드에 장착하여 센서 값을 게이트웨이가 웹 서버로 보내는 방식으로 진행했습니다.8. Device-On 소개 Device-On에 연결된 IoT 장비를 중앙에서 한번에 관리하게 해주는 소프트웨어 (PaaS) 센서들이 WISE-3610 게이트웨이로 보낸 데이터 값을 실시간으로 모니터링 할 수 있으며 원격으로 소프트웨어 업데이트를 진행하는 등 여러가지 기능을 포함 DB 및 Dashboard 시각화 구현 용이 Restful API를 활용하여 애플리케이션 개발 가능 더보기: https://www.advantech.co.kr/products/550836fd-a062-4780-8416-3b742bc7fb16/deviceondm/mod_167c9c1d-59e6-4ed7-b42c-0029be022cb19. 실제 Device-On에서의 sensor값 확인개인 공부 클라우드 서비스의 종류 IaaS(Infrastructure as a Service, 아이아스)서비스로 제공되는 인프라스트럭처로 개발사에 제공되는 물리적 자원을 가상화함인터넷을 통해 사용자가 원하는 만큼의 ‘인프라’를 활용할 수 있는 방식음식을 만드는 과정으로 비유하면 요리할 수 있는 가스레인지나 조리도구등의 기본 사항만 제공되고 식재료 및 세팅 수저등은 개인이 준비해야 하는 상황 PaaS(Platform as a Service)서비스로 제공되는 플랫폼으로 개발사에 제공되는 플랫폼을 가상화함개발자들을 위한 클라우드 서비스라고도 하며 개발자가 코드만 개발해서 바로 적용할 수 있도록 리소스가 모두 포함되어있는 플랫폼이 제공되는 형태IaaS가 기본적인 조리 도구를 빌려주는 개념이라면 PaaS는 재료 까지 준비되어 조리만 하면 되는 상황 SaaS(Software as a Service)서비스로 제공되는 소프트웨어로 고객에게 제공되는 소프트웨어를 가상화함돈을 지불하면 모든 것이 구축된 소프트웨어를 바로 사용할 수 있는 형태로 대중에게 가장 익숙한 방식SaaS는 음식을 조리하는 것이 아닌 식당에서 음식을 시켜 먹거나 배달 시켜먹는 방법 " }, { "title": "Algorithm 1.DP", "url": "/posts/How-to-Solve-DP/", "categories": "Algorithm", "tags": "BOJ, DP, Algorithm, Dynamic Programing, Python", "date": "2022-02-11 00:30:00 +0900", "snippet": "동적 프로그래밍, 동적 계획법 (Dynamic Programing)다이나믹(Dynamic)의 유래다이나믹 프로그래밍에서 다이나믹의 의미는 동적할당의 다이나믹과 다릅니다. 동적할당에서 다이나믹은 프로그램이 실행되는 도중에 메모리를 동적으로 할당하는 자료구조 기법으로 메모리 공간을 낭비하지 않기 위해 사용합니다.하지만 다이나믹 프로그래밍에서 다이나믹의 의미는 크게 의미를 부여하지 않습니다. 다이나믹 프로그래밍을 먼저 만든 사람도 이름이 단지 멋있어서 다이나믹을 붙였다고 합니다.DP의 장점다이나믹 프로그램이은 메모리 공간을 사용하여DP의 방식 2가지 탑-다운 (Top-Down) 재귀 함수를 이용해서 DP를 작성하는방법으로 큰 문제를 해결하기 위해 작은 문제를 호출하는 방식으로 메모이제이션(memoization)을 사용하여 이전에 푼 결과를 테이블이나 리스트에 저장한다. DP의 대표적인 문제인 피보나치 수열을 간단하게 탑 다운 방식으로 코드를 작성하면 다음과 같다. dp = [0]*(n+1)def sol(x): if x == 1 or x == 2: return 1 if dp[x] != 0: return dp[x] dp[x] = sol(x-1) + sol(x-2) return dp[x]print(sol(n)) 바텀-업 (Bottom-up) 반복문을 이용하여 작은 문제부터 풀어 점점 큰 문제를 해결하는 방식으로 탑-다운 방식처럼 메모하는 방법을 채택하지만 바텀 업 방식에서는 메모이제이션이라는 말을 사용하는 대신 ‘DP 테이블’ 또는 Tabulation 이라는 용어를 사용한다고 한다. 하지만 그 본질은 메모이제이션과 크게 다르지 않다. 피보나치 수열을 바텀-업 방식으로 작성하면 다음과 같다 dp = [0]*(n+1)dp[1] = 1 #기저dp[2] = 1 #기저for i in range(3, n+1): dp[i] = dp[i-1] + dp[i-2]print(dp[n]) DP 문제 조건다이나믹 프로그래밍을 사용할 때는 다음과 같습니다. 작은 문제의 계산들이 반복적으로 일어나고 (Overlapping Subproblems, 겹치는 부분 문제) 같은 문제를 구할 때 마다 문제의 정답이 같은 경우 (Optimal Substruction 최적 부분 구조). DP 풀이, 접근 방법 1. DP를 풀 때, 먼저 규칙성을 찾습니다. 대부분 시간이나 공간의 변화에 따라 현재와 과거를 비교하여 규칙이나 변화 유형들을 찾아냅니다. 2. 그 규칙 속에서 반복되는 계산을 찾아내고 이를 점화식으로 표현합니다. 3. 반복되는 계산을 저장할 리스트나 배열같은 메모리 공간을 할당합니다. (Tabulation) 4. 뒤에 오는 값은 무시하고 앞에서 계산한 결과를 이용하여 점화식을 표현합니다. 5. 기저가 필요 할 땐 (basis, 피보나치의 dp[1], dp[2] 같은 초기 값) 먼저 선언합니다. 6. 반복문으로 min, max, 또는 연산하여 현재 값을 리스트나 테이블에 저장합니다.저는 최대한 DP 문제를 바텀-업 (반복문)을 이용해서 해결하려고 노력하고 있습니다. 탑-다운 (재귀함수)를 사용하면 시간복잡도가 매우 커져 제한 시간 내에 문제를 풀지 못하는 경우가 발생할 확률이 높기 때문입니다.특히 DP 문제는 책으로 예제와 함께 기본기를 먼저 다진 후, 시간이 걸리더라도 답지 없이 스스로 점화식을 생각해내는 힘을 기르는 것이 가장 중요한 것 같습니다." }, { "title": "백준 2156 포도주 시식", "url": "/posts/BOJ-2156/", "categories": "BOJ, DP", "tags": "BOJ, DP, 2156", "date": "2022-02-11 00:00:00 +0900", "snippet": "문제출처: https://www.acmicpc.net/problem/2156접근 방법각 잔의 순서를 a1 a2 a3 a4 a5 a6 ai (현재 i = 7) 이라고 하면,포도주를 마시는 경우의 수는 다음 3개의 경우의 수만 존재합니다.이를 점화식으로 나타내면 다음과 같습니다.정답 코드n = int(input())array = [0]*(n+1)dp = [0]*(n+3)for i in range(1, n+1): array[i] = int(input())dp[1] = array[1]#dp2[2] = array[1] + array[2]#dp3[3] = array[2] + array[3]MAX = 0for i in range(1, n+1): dp[i] = max(dp[i-1], dp[i-2]+array[i], array[i-1]+ array[i] + dp[i-3])print(dp[n])문제점, 시간이 오래 걸린 이유이 문제를 푸는데 꼬박 이틀이 소요되었습니다. 물론 다른 DP 문제도 건들였지만 이 문제를 해결하지 못하면 다른 문제는 더욱 해결 하지 못할 것 같은 오기가 생겨 이 문제를 먼저 해결하기로 다짐했습니다.처음 이 문제를 접했을 때 컴퓨터 처럼 앞에서 부터 차례로 계산 하지 않고 앞 과 뒤의 경우를 모두 따졌습니다. 그 결과 앞에서 계산한 바텀-업 방식을 활용하지 못하여 경우의 수를 통한 점화식을 찾아내지 못했습니다.또한 값을 저장하는 dp가 과연 그 i번째 인덱스에서 최대값인지 의문이 들어 일일이 확인하느라 시간이 오래 걸렸습니다.다른 풀이 (틀림)저는 처음 정답인 점화식을 세우고도 기저와 반복문을 잘못 설정하여 틀렸습니다. 그런데 그 점화식을 고치지 않고 순간의 dp에 저장된 최대값이 잘못되었다고 생각하여 조금은 다른 방법으로 접근하여 새로 풀었습니다. 여기서 시간이 많이 걸렸습니다.접근 방식은 다음과 같습니다.먼저 이전에 계산한 작은 값들을 저장할 리스트를 3개를 만들었습니다. 그리고 각 리스트 마다 규칙성을 찾아 누적을 저장하였습니다.dp1 리스트는 인덱스를 3으로 나눌때 나머지가 2로 떨어지는 경우 값을 더하지 않았고dp2 리스트는 3으로 나누어 떨어질 때 값을 더하지 않았습니다.마지막으로 dp3 는 나머지가 1일 경우 더하지 않았습니다.저는 이 경우를 각각 리스트를 선언해서 문제를 풀었습니다. dp를 하나만 선언하여 최댓값을 저장하는 과정에서 문제가 발생한다고 생각하여 따로 선언했습니다.위 방식으로 파이참에서는 정상적으로 작동하고 모든 문제도 풀리긴 했지만 메모리 공간이 많이 소요되는지 백준에서는 틀렸습니다 가 출력되었습니다.그래서 다시 문제를 리스트 하나로 제한하며 풀려고 노력했고 처음에 제가 새웠던 점화식으로 풀었더니 해결 되었습니다.아래는 틀린 코드입니다. 시간복잡도 뿐만 아니라 공간복잡도, 메모리도 코딩테스트에서는 중요하다는 것을 새롭게 배우게 되었습니다.n = int(input())array = [0]*(n+1)dp1 = [0]*(n+3)dp2 = [0]*(n+3)dp3 = [0]*(n+3)for i in range(1, n+1): array[i] = int(input())# 초기값 필요없음#dp1[1] = array[1]#dp2[2] = array[1] + array[2]#dp3[3] = array[2] + array[3]for i in range(1, n+1): if i%3 == 2: dp1[i] = dp1[i-1] dp2[i] = dp2[i-1] + array[i] dp3[i] = dp3[i - 1] + array[i] elif i%3 == 0: dp1[i] = dp1[i-1] + array[i] dp2[i] = dp2[i - 1] dp3[i] = dp3[i - 1] + array[i] elif i%3 == 1: dp1[i] = dp1[i-1] + array[i] dp2[i] = dp2[i - 1] + array[i] dp3[i] = dp3[i - 1]print(max(dp1[n], dp2[n], dp3[n]))" }, { "title": "Chirpy jekyll 테마에서 프로필 변경하기", "url": "/posts/Chirpy-theme-profil/", "categories": "jekyll", "tags": "blog, jekyll theme, Chirpy, profil", "date": "2022-01-29 00:10:00 +0900", "snippet": "프로필 변경 및 사진 업로드먼저 로컬에 이미지만을 저장할 새로운 폴더를 만들고 그 폴더를 자신의 GitHub에 푸시합니다. 여기서 주의할 점은 &amp;lt;자신의 github이름&amp;gt;.github.io안이 아닌 밖에 리포지토리를 생성합니다.git push 하는 법은 이전에도 많이 사용하였으니 생략하겠습니다._config.yml 파일에서 img_cdn 은 images 파일의 끝을 담당하고 있습니다.avatar 부분 프로필을 담당하고 있습니다.img_cdn https://cdn.jsdelivr.net/gh/: CDN 서버를 활용해서 js파일들을 전송하는 것인데 github 리포지토리에 있는 사진을 서비스 합니다.gh는 github의 약자입니다. 그대로 냅둡니다.자세한 사항은 jsdelivr에서 확인하면 됩니다. cotes2020/여기는 자신의 GitHub 이름을 입력합니다. chirpy-images사진들이 있는 리포지토리 이름입니다. &amp;lt;자신의 github이름&amp;gt;.github.io안이 아닌 밖에 리포지토리를 생성합니다. @f4e0354b674f65a53b8917f0f786ed2956898cc1’리포지토리의 버전을 의미합니다. 버전을 찾는 방법은 다음과 같습니다. 저는 Chripy GitHub를 예로 들겠습니다. Chripy jekyll 테마의 제작자의 GitHub의 chirpy-images로 이동합니다. 위 사진 순서대로 commons 커밋 메세지를 클릭합니다 그러면 위의 commit 옆에 버전이 나타나는데 이를 복사합니다. 이 버전을 @ 옆에 붙여넣기 합니다. avatar프로필로 저장하고 싶은 사진이 있는 경로의 주소를 작성합니다. 위에서 생성한 이미지 전용 폴더 안에 있어야 합니다.사진 업로드가 실시간으로 입력이 안되는 경우Chripy 테마의 프로필과 사진 업로드는 조금 특이한 방식으로 되어있습니다. 사진이 로컬에만 있으면 안되고사진을 GitHub에 업로드하여 아바타나 이미지를 블로그에 반영 할 수 있습니다. 이전의 커밋버전과 현재의 버전이 안맞으면 이미지 로드가 잘 안되는 경우가 있습니다.이 경우 이미지를 모두 GitHub에 업로드 한 후, 바뀐 버전을 _config.yml 파일에서 img_cdn 부분의 버전을 수정하여 로컬에서 작업해보시기 바랍니다. 그리고 이미지 폴더가 2개 이상인 경우 동시에 커밋을 해서 커밋 버전을 되도록 일치시키는 것이 좋습니다. 불가피 할 경우 최신의 버전을 img_cdn 버전에 입력하시면 될 것 같습니다.버전은 콘솔 창에서도 git log 통해 확인이 가능합니다.참조한 사이트여기는 제가 참조한 사이트입니다.https://chirpy.cotes.page/https://kkminseok.github.io/posts/startblog/https://blog.kimzinu.com/posts/jekyll-4/https://zeddios.tistory.com/1223?category=682196" }, { "title": "GitHub 블로그에 Chirpy jekyll 테마 (theme) 적용하기", "url": "/posts/jekyll-Chirpy-theme/", "categories": "jekyll", "tags": "blog, jekyll, theme, Chirpy", "date": "2022-01-27 15:22:00 +0900", "snippet": "jekyll 테마 찾기https://jekyll-themes.com/free/저는 이 많은 무료 테마 중에서 다음과 같은 이유로 chirpy 테마를 선택하게 되었습니다. 왼쪽에 카테고리나 네비게이터가 있어 사용자 입장에서 이동이 자유로우며 현재 위치가 어디인지 쉽게 파악이 가능함 검색 기능으로 쉽게 글이나 자료를 찾을 수 있음 프로필 사진 첨부와 브라우저 탭에 icon을 넣을 수 있어 차별화 된 블로그 제작 가능 블로그 첫 페이지에서 포스트의 제목과 글이 간략하게 나와서 복잡해 보이지 않음 jekyll 테마 중에선 비교적 유명하여 문제가 발생하면 다른 사람들이 사용했던 방법들을 찾아 볼 수 있음 꾸준한 관리로 최근까지 업데이트 되어있음이제 부터는 chirpy 테마 위주로 글을 작성하겠습니다. 다른 테마는 적용 되지 않을 수 있으니 참고 바랍니다!PrerequisitesJekyll, ruby, bundler 등을 사전에 설치해야 chirpy를 수월하게 설치할 수 있습니다.설치 방법은 제 이전 포스트에 나와있습니다. 주소는 아래와 같습니다.jekyll(지킬)로 GitHub 블로그 만들기만약 여기서 이해가 잘 안된다면 제가 참조한 블로그들에서 확인 부탁드립니다.블로그들은 이 포스트 제일 하단에 있습니다.참고사항저는 GitHub Desktop 앱을 사용해서 제가 작성한 커맨드를 모두 사용하지는 않습니다. GitHub Desktop 이 매우 편리하지만 모든 사람들이 GitHub Desktop 앱을 사용하지 않아서 커맨드 형식으로 포스트를 작성했습니다. 문제가 생기는 경우 메일 주세요!chirpy-starter로 레포지터리 생성저는 제가 참조했던 블로그 들과 다르게 했습니다. 먼저 아래 사이트로 접속해서 레포지터리를 새로 만듭니다.Chirpy-starter중요한건 리포지토리 이름을 &amp;lt;자신의 github이름&amp;gt;.github.io로 설정해야 합니다.만약 이전에 &amp;lt;자신의 github이름&amp;gt;.github.io로 레포지터리를 만드셨다면, 이 리포지토리를 삭제하고 다시 생성하시기 바랍니다.삭제하는 방법은 settings에 들어가셔서 맨 아래 가시면 Delete this repository를 선택하시면 됩니다.자신의 컴퓨터에서 원하는 위치에 이동해서cmd 나 Start Command Prompt With Ruby를 실행하여위에서 생성한 자신의 리포지토리 주소를 입력후 git clone을 실행합니다.또는 자신의 리포지토리를 깃허브에서 ZIP파일로 다운 받아 압축을 해제합니다.그 후 다음 명령어를 실행합니다. $ bash tools/init.sh만약 bash가 실행이 안되거나 bash가 설치가 안되어있는 경우 아래 사이트를 참조해서 bash를 설치하시기 바랍니다.Windows10 에서 bash 설치저는 bash 때문에 시간이 많이 뺏겼고 아무도 이 문제가 발생하지 않아 저 혼자 해결하느라 시간이 많이 걸렸습니다. 제가 이 글을 남기는 이유도 여기에 있습니다.init.sh 명령어는 &amp;lt;자신의 github이름&amp;gt;.github.io 폴더에서.travis.yml 파일과,docs 폴더,_posts폴더 안에있는 파일들을 삭제해주는 기능이 있습니다.(A) Gemfile.lock을 .gitignore 텍스트 파일 맨 아래에 추가하고 저장합니다. 그리고 Gemfile.lock을 삭제합니다.(A) 부분은 chirpy 블로그의 getting-started 포스트의 내용과 다르지만 저는 이렇게 해서 오히려 잘 되어 이 방법을 사용하고 있습니다. 자신에게 맞는 방법을 하면 될 것 같습니다.그리고 Gemfile.lock을 삭제해도 다시 생기는 경우가 있는데 계속 삭제 안해도 저는 잘 되어서 .gitignore 파일에만 Gemfile.lock을 추가하면 되는 것 같습니다.아까 git clone이나 ZIP파일을 압축 해제한 경로에서 다음 명령어를 실행합니다. $ bundle exec jekyll s첫 블로그 페이지 설정 및 변경_config.yml 파일을 열어서 수정 합니다. 저는 VScode 편집기로 다음과 같이 수정했습니다.timezone: Asia/Seoultitle: osnimtagline: Python, Android(java), React, Node.js, C++, C, Linux.url: “https://osnim.github.io”username: osnimname: osnimemail: alsth4@naver.comlinks: 는 다른 부분은 두고 url 부분만 수정했습니다.theme_mode: [light]아래 부터는 프로필 사진을 변경하는 부분입니다. 여기 자세한 부분은 따로 포스트 할 예정이니 일단 넘어가 주세요img_cdn: “https://cdn.jsdelivr.net/gh/osnim/Images@edc68e382d111f90dae130584bed36d2c5be1015”vatar: “/commons/hi_noglasses.jpg”Running Local Servergit clone을 실행한 위치 또는 chirpy 테마가 설치된 폴더 경로로 이동하셔서 다음 명령어를 실행합니다. $ bundle exec jekyll s로컬 서비스가 실행되고 다음 주소를 인터넷 브라우저 주소창에 입력해주시기 바랍니다.http://127.0.0.1:4000만약 로컬 서비스를 종료하고 싶은 경우cmd 나 Start Command Prompt With Ruby에서 ctrl + c 를 입력하면 됩니다.이 페이지는 다른사람은 보지 못하고 오로지 자신의 컴퓨터에서만 확인이 가능합니다.실제 GitHub 블로그에 적용하기위에서 변경한 사항이 모두 로컬 서비스에서 적용이 잘 되었으면 이제 자신의 github.io블로그에 chirpy 테마를 진짜로 적용시킬 차례입니다. 저는 블로그 글까지 적용 잘 되는지 https://github.com/cotes2020/jekyll-theme-chirpy/tree/master/_posts의 포스트들을 제 _post 폴더에 넣어 글이 잘 게시되는지 확인하는 방법으로 진행했습니다.cmd 나 Start Command Prompt With Ruby에서 git push를 진행합니다. git add --all git commit -m &quot;커밋 메시지&quot; git push -u origin main여기서부터가 가장 중요합니다. chirpy는 다른 jekyll 테마와 달리 브랜치가 main이 아닌 chirpy 제작자가 만든 gh-pages라는 branch를 새로 생성해서 bot을 이용하여 자동으로 pages build and deployment을 실행해서 GitHub에 반영합니다.이와 관련해서 자세한 사항은 chirpy getting-started 페이지를 확인하면 될 것 같습니다.만약 pages build and deployment에서 빨간 불이 들어온다면 글 제목이나 Gemfile에서 문제가 생긴 것이니 다시 한번 확인 부탁드립니다.글 제목의 경우 되도록 영어로 작성하기를 권장드리며, 띄어쓰기 대신 - 를 사용해주세요gh-pages라는 branch를 적용하는 방법은 자신의 GitHub 페이지로 이동해서 &amp;lt;자신의 github이름&amp;gt;.github.io 리포지토리로 이동합니다.그 후 Settings의 Pages 메뉴로 이동해서 Branch를 main에서 gh-pages로 선택하고 /(root)폴더는 그대로 놓고 save 버튼을 클릭합니다.만약 gh-pages Branch가 생성되지 않은 경우bash tools/init.sh 에서 문제가 생겼거나 Gemfile.lock에서 문제가 생긴 것일 수 있으니 .gitignore 파일에서 Gemfile.lock을 넣어보시고 안되면 리포지토리를 삭제하고 처음부터 다시 하기를 권장합니다. 저 또한 그랬습니다.save까지 잘 되었다면 이제 리포지토리의 Actions로 이동하셔서 블로그에 적용되는 진행사항을 볼 수 있습니다.Action에서 노란 불이 들어오며 진행상황을 알려줍니다. 평균 30초~ 2분 정도 소요되며 이보다 더 오래 걸린적도 있지만 5분을 넘기진 않는 것 같습니다.그리고 초록불이 들어와 GitHub 블로그에 적용이 되었다고 하더라도 실제 저희가 보는 데에는 시간이 더 걸리니 10초~30초 정도 블로그를 확인해보시기 바랍니다.저도 처음에는 변경할 때 마다 블로그에 적용했는데 이러면 시간이 오래 걸리고 바로 확인을 못하는 문제가 발생했습니다.그래서 지금은 로컬에서 먼저 수정을 하고 최종만 블로그에 포스팅하는 방식으로 진행하고 있습니다.혹시라도 잘 안되는 부분이 있으면 왼쪽 메일로 문의 주세요!제 블로그를 방문해주셔서 정말 감사합니다.참조한 사이트여기는 제가 참조한 사이트입니다.https://chirpy.cotes.page/https://kkminseok.github.io/posts/startblog/https://blog.kimzinu.com/posts/jekyll-4/https://zeddios.tistory.com/1223?category=682196" }, { "title": "jekyll(지킬)로 GitHub 블로그 만들기 (Windows10, 64bit)", "url": "/posts/jekyll-GitHub/", "categories": "jekyll", "tags": "Github, jekyll, theme", "date": "2022-01-26 21:00:00 +0900", "snippet": "Github 블로그 만들기 자신의 Github에서 Repository를 새로 만듭니다. 중요한건 Repository 이름을 &amp;lt;자신의 github이름&amp;gt;.github.io로 설정해야 합니다. 제 블로그는 osnim GitHub 블로그 입니다. README file을 체크합니다. (안해도 상관 없지만 저는 하는 것을 추천합니다.) 그 Repository를 로컬로 clone 합니다. ZIP파일로 다운받아서 압축을 풀어도 되고 HTTPS 주소를 복사하여 프롬프트에서 아래 명령어를 실행해도 상관없습니다 git clone 복사한 주소 압축을 푼 Explorer나 git clone을 실행한 위치에 Repository의 파일이 생성됩니다. 이 경로를 잘 기억해두셔야 합니다. git push git add --allgit commit -m &quot;커밋 메시지&quot;git push -u origin main 로컬에서 push한 github 블로그를 주소창에 넣어 확인합니다 https://&amp;lt;자신의 github이름&amp;gt;.github.io jekyll를 Github 블로그에 적용1. Ruby Install (Ruby 다운 및 설치)저는 이번 GitHub 블로그를 만들면서 jekyll(지킬)에서 제공하는 Theme(테마)를 사용했습니다.jekyll은 ruby라는 언어로 제작되었습니다.ruby installer 사이트 가셔서 Ruby를 다운받고 설치를 해야합니다. (참고로 저는 Windows10 64bit 운영체제를 사용하고 있습니다.)사이트에 들어가시면Ruby, we recommend that you use the Ruby+Devkit 2.7.X (x64) installer.라는 문구를 오른쪽에서 확인 할 수 있습니다.저도 안정된 Ruby+Devkit 2.7.5-1(x64) 버전을 사용했고 잘 되었습니다.설치시 옵션을 선택할 때 Use UTF-8 as default external encoding. 을 꼭 체크해야합니다.저는 3개 모두 체크했습니다.2. jekyll을 로컬에 설치Ruby 설치가 완료되면 Start Command Prompt with Ruby 프롬프트를 실행합니다.처음 실행하면 경로가 C:\\Users\\사용자이름 인데 여기에 다음과 같은 명령을 넣고 실행하여 로컬에 jekyll을 설치합니다.gem install jekyll bundler프롬프트 콘솔 창에서 이전에 clone한 로컬 경로인 github.io 폴더로 이동하여 다음 명령어를 순차적으로 입력합니다.3. Jekyll 생성 및 jekyll을 로컬 서버에서 실행jekyll new ./bundle installbundle exec jekyll serve이렇게 입력하고 http://127.0.0.1:4000/ 또는 http://localhost:4000/를 인터넷 주소창에 입력하여 로컬 서버에서 jekyll이 적용된 Github 블로그를 확인할 수 있습니다. 하지만 이는 자신의 컴퓨터에서만 확인 가능하므로 다른 사람도 접근 가능할 수 있게 Github repository에 push를 해줘야 합니다.&amp;lt;자신의 github이름&amp;gt;.github.io repository에 다음과 같은 명령어를 입력하여 push합니다.git add .git commit -m &quot; 커밋 메세지&quot;git push모두 입력 후 브라우저 주소창에 &amp;lt;자신의 github이름&amp;gt;.github.io를 입력하여 자신의 github 블로그를 확인합니다." }, { "title": "GitHub 블로그를 시작하기 앞서..", "url": "/posts/Beginning-Github-blog/", "categories": "blogging", "tags": "Github, blog, blogging", "date": "2022-01-26 21:00:00 +0900", "snippet": "내가 GitHub 블로그로 기록을 남기는 이유나도 이제 대학교를 졸업하고 제대로 취업 준비를 하려고 한다. 내 동기들은 모두 4학년에 취업준비를 시작하지만 나는 1학년 때 학점을 잘 챙겨놓지 못해서 4학년 1,2학기 21. 20 학점을 들었다. 그래서 취업 준비를 본격적으로 하지 못했다.4학년 때 자격증도 따고 서류도 넣어보고 필기시험도 보러 가며 나 나름대로 취업시장을 조금이나가 경험했지만 악착같이 열심히 하지 않았다. 전공 수업과 학점이 그 당시에는 더 중요했기 때문이다.학점을 많이 복구해서 내 기준에서의 좋은 학점까지 만들 수 있었다. 또한 내가 배우고 싶은 강의를 들으며 원하던 공부도 다 해봤다고 생각해서 이제는 온전히 취업에 신경 쓸 수 있을 것 같다. 그래서 이번 주 부터 포트폴리오, 코딩테스트, CS에만 전념할 것이다.그래서 이렇게 처음 Github 블로그 작성에 보다 신경을 많이 쓰고 있으며 글도 많이 남길 것이다.예전의 나 였으면 Github 블로그만 만들고 그 과정에서 생긴 Error나 당황했던 내용을 모두 남기지 않고 글도 안 썼을테지만 지금은 최대한 기록들을 남기고 싶다.이렇게 복습하면서 공부도 되고, 다시 구글링하여 문제를 해결하는 번거로움을 덜어 낼 수 있을 것이다.하지만 가장 큰 이유는 내가 아무런 비용 없이 받았던 도움들을 또 다른 누군가에게 베풀수 있다고 생각하기 때문에 될 수 있으면 Github 블로그를 자주 작성할 계획이다." } ]
